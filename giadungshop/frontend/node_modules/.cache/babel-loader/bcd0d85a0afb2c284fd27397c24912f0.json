{"ast":null,"code":"import { ALL_BRANDS_REQUEST, ALL_BRANDS_SUCCESS, ALL_BRANDS_FAIL, BRAND_DETAILS_REQUEST, BRAND_DETAILS_SUCCESS, BRAND_DETAILS_FAIL, NEW_BRAND_REQUEST, NEW_BRAND_SUCCESS, NEW_BRAND_RESET, NEW_BRAND_FAIL, DELETE_BRAND_REQUEST, DELETE_BRAND_SUCCESS, DELETE_BRAND_RESET, DELETE_BRAND_FAIL, UPDATE_BRAND_REQUEST, UPDATE_BRAND_SUCCESS, UPDATE_BRAND_RESET, UPDATE_BRAND_FAIL, GET_BRAND_BY_ID_REQUEST, GET_BRAND_BY_ID_SUCCESS, GET_BRAND_BY_ID_FAIL, CLEAR_ERRORS } from '../constants/brandConstants';\nimport axios from 'axios';\nexport const getBrands = () => async dispatch => {\n  try {\n    dispatch({\n      type: ALL_BRANDS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/brands`);\n    dispatch({\n      type: ALL_BRANDS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ALL_BRANDS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const getBrandDetailsById = id => async dispatch => {\n  try {\n    dispatch({\n      type: BRAND_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/brand/${id}`);\n    dispatch({\n      type: BRAND_DETAILS_SUCCESS,\n      payload: data.brand\n    });\n  } catch (error) {\n    dispatch({\n      type: BRAND_DETAILS_FAIL,\n      payload: error.response\n    });\n  }\n};\nexport const getBrandDetailsByName = name => async dispatch => {\n  try {\n    dispatch({\n      type: BRAND_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/brand/name/${name}`);\n    dispatch({\n      type: BRAND_DETAILS_SUCCESS,\n      payload: data.brand\n    });\n  } catch (error) {\n    dispatch({\n      type: BRAND_DETAILS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // New brand (Admin)\n\nexport const newBrand = (name, description) => async dispatch => {\n  try {\n    dispatch({\n      type: NEW_BRAND_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/admin/brand/new`, {\n      name,\n      description\n    }, config);\n    dispatch({\n      type: NEW_BRAND_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: NEW_BRAND_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Delete brand (Admin)\n\nexport const deleteBrand = id => async dispatch => {\n  try {\n    dispatch({\n      type: DELETE_BRAND_REQUEST\n    });\n    const {\n      data\n    } = await axios.delete(`/api/admin/brand/${id}`);\n    dispatch({\n      type: DELETE_BRAND_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: DELETE_BRAND_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Update brand (ADMIN)\n\nexport const updateBrand = (id, name, description) => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_BRAND_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/admin/brand/${id}`, {\n      name,\n      description\n    }, config);\n    dispatch({\n      type: UPDATE_BRAND_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_BRAND_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Clear Errors\n\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["C:/Users/Admin/Documents/CHUNGKHOANNN/new/giadungshop/frontend/src/actions/brandActions.js"],"names":["ALL_BRANDS_REQUEST","ALL_BRANDS_SUCCESS","ALL_BRANDS_FAIL","BRAND_DETAILS_REQUEST","BRAND_DETAILS_SUCCESS","BRAND_DETAILS_FAIL","NEW_BRAND_REQUEST","NEW_BRAND_SUCCESS","NEW_BRAND_RESET","NEW_BRAND_FAIL","DELETE_BRAND_REQUEST","DELETE_BRAND_SUCCESS","DELETE_BRAND_RESET","DELETE_BRAND_FAIL","UPDATE_BRAND_REQUEST","UPDATE_BRAND_SUCCESS","UPDATE_BRAND_RESET","UPDATE_BRAND_FAIL","GET_BRAND_BY_ID_REQUEST","GET_BRAND_BY_ID_SUCCESS","GET_BRAND_BY_ID_FAIL","CLEAR_ERRORS","axios","getBrands","dispatch","type","data","get","payload","error","response","message","getBrandDetailsById","id","brand","getBrandDetailsByName","name","newBrand","description","config","headers","post","deleteBrand","delete","success","updateBrand","put","clearErrors"],"mappings":"AAAA,SACIA,kBADJ,EAEIC,kBAFJ,EAGIC,eAHJ,EAKIC,qBALJ,EAMIC,qBANJ,EAOIC,kBAPJ,EASIC,iBATJ,EAUIC,iBAVJ,EAWIC,eAXJ,EAYIC,cAZJ,EAcIC,oBAdJ,EAeIC,oBAfJ,EAgBIC,kBAhBJ,EAiBIC,iBAjBJ,EAmBIC,oBAnBJ,EAoBIC,oBApBJ,EAqBIC,kBArBJ,EAsBIC,iBAtBJ,EAwBIC,uBAxBJ,EAyBIC,uBAzBJ,EA0BIC,oBA1BJ,EA4BIC,YA5BJ,QA6BO,6BA7BP;AA+BA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAC/C,MAAI;AACAA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEzB;AAAR,KAAD,CAAR;AAEA,UAAM;AAAE0B,MAAAA;AAAF,QAAW,MAAMJ,KAAK,CAACK,GAAN,CAAW,aAAX,CAAvB;AACAH,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAExB,kBADD;AAEL2B,MAAAA,OAAO,EAAEF;AAFJ,KAAD,CAAR;AAIH,GARD,CAQE,OAAOG,KAAP,EAAc;AACZL,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEvB,eADD;AAEL0B,MAAAA,OAAO,EAAEC,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAoBK;AAFxB,KAAD,CAAR;AAIH;AACJ,CAfM;AAiBP,OAAO,MAAMC,mBAAmB,GAAIC,EAAD,IAAQ,MAAOT,QAAP,IAAoB;AAC3D,MAAI;AAEAA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEtB;AAAR,KAAD,CAAR;AACA,UAAM;AAAEuB,MAAAA;AAAF,QAAW,MAAMJ,KAAK,CAACK,GAAN,CAAW,cAAaM,EAAG,EAA3B,CAAvB;AACAT,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAErB,qBADD;AAELwB,MAAAA,OAAO,EAAEF,IAAI,CAACQ;AAFT,KAAD,CAAR;AAKH,GATD,CASE,OAAOL,KAAP,EAAc;AACZL,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEpB,kBADD;AAELuB,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAFV,KAAD,CAAR;AAIH;AACJ,CAhBM;AAkBP,OAAO,MAAMK,qBAAqB,GAAIC,IAAD,IAAU,MAAOZ,QAAP,IAAoB;AAC/D,MAAI;AAEAA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEtB;AAAR,KAAD,CAAR;AACA,UAAM;AAAEuB,MAAAA;AAAF,QAAW,MAAMJ,KAAK,CAACK,GAAN,CAAW,mBAAkBS,IAAK,EAAlC,CAAvB;AACAZ,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAErB,qBADD;AAELwB,MAAAA,OAAO,EAAEF,IAAI,CAACQ;AAFT,KAAD,CAAR;AAKH,GATD,CASE,OAAOL,KAAP,EAAc;AACZL,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEpB,kBADD;AAELuB,MAAAA,OAAO,EAAEC,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAoBK;AAFxB,KAAD,CAAR;AAIH;AACJ,CAhBM,C,CAkBP;;AACA,OAAO,MAAMM,QAAQ,GAAG,CAACD,IAAD,EAAOE,WAAP,KAAuB,MAAOd,QAAP,IAAoB;AAC/D,MAAI;AAEAA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEnB;AAAR,KAAD,CAAR;AAEA,UAAMiC,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AADE,KAAf;AAKA,UAAM;AAAEd,MAAAA;AAAF,QAAW,MAAMJ,KAAK,CAACmB,IAAN,CAAY,sBAAZ,EAAmC;AAAEL,MAAAA,IAAF;AAAQE,MAAAA;AAAR,KAAnC,EAA0DC,MAA1D,CAAvB;AAEAf,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAElB,iBADD;AAELqB,MAAAA,OAAO,EAAEF;AAFJ,KAAD,CAAR;AAKH,GAhBD,CAgBE,OAAOG,KAAP,EAAc;AACZL,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEhB,cADD;AAELmB,MAAAA,OAAO,EAAEC,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAoBK;AAFxB,KAAD,CAAR;AAIH;AACJ,CAvBM,C,CA0BP;;AACA,OAAO,MAAMW,WAAW,GAAIT,EAAD,IAAQ,MAAOT,QAAP,IAAoB;AACnD,MAAI;AAEAA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEf;AAAR,KAAD,CAAR;AAEA,UAAM;AAAEgB,MAAAA;AAAF,QAAW,MAAMJ,KAAK,CAACqB,MAAN,CAAc,oBAAmBV,EAAG,EAApC,CAAvB;AAEAT,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEd,oBADD;AAELiB,MAAAA,OAAO,EAAEF,IAAI,CAACkB;AAFT,KAAD,CAAR;AAKH,GAXD,CAWE,OAAOf,KAAP,EAAc;AACZL,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEZ,iBADD;AAELe,MAAAA,OAAO,EAAEC,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAoBK;AAFxB,KAAD,CAAR;AAIH;AACJ,CAlBM,C,CAoBP;;AACA,OAAO,MAAMc,WAAW,GAAG,CAACZ,EAAD,EAAKG,IAAL,EAAWE,WAAX,KAA2B,MAAOd,QAAP,IAAoB;AACtE,MAAI;AAEAA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEX;AAAR,KAAD,CAAR;AACA,UAAMyB,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AADE,KAAf;AAMA,UAAM;AAAEd,MAAAA;AAAF,QAAW,MAAMJ,KAAK,CAACwB,GAAN,CAAW,oBAAmBb,EAAG,EAAjC,EAAoC;AAAEG,MAAAA,IAAF;AAAQE,MAAAA;AAAR,KAApC,EAA2DC,MAA3D,CAAvB;AAEAf,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEV,oBADD;AAELa,MAAAA,OAAO,EAAEF,IAAI,CAACkB;AAFT,KAAD,CAAR;AAKH,GAhBD,CAgBE,OAAOf,KAAP,EAAc;AACZL,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAER,iBADD;AAELW,MAAAA,OAAO,EAAEC,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAoBK;AAFxB,KAAD,CAAR;AAIH;AACJ,CAvBM,C,CAyBP;;AACA,OAAO,MAAMgB,WAAW,GAAG,MAAM,MAAOvB,QAAP,IAAoB;AACjDA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAEJ;AADD,GAAD,CAAR;AAGH,CAJM","sourcesContent":["import {\n    ALL_BRANDS_REQUEST,\n    ALL_BRANDS_SUCCESS,\n    ALL_BRANDS_FAIL,\n\n    BRAND_DETAILS_REQUEST,\n    BRAND_DETAILS_SUCCESS,\n    BRAND_DETAILS_FAIL,\n\n    NEW_BRAND_REQUEST,\n    NEW_BRAND_SUCCESS,\n    NEW_BRAND_RESET,\n    NEW_BRAND_FAIL,\n\n    DELETE_BRAND_REQUEST,\n    DELETE_BRAND_SUCCESS,\n    DELETE_BRAND_RESET,\n    DELETE_BRAND_FAIL,\n\n    UPDATE_BRAND_REQUEST,\n    UPDATE_BRAND_SUCCESS,\n    UPDATE_BRAND_RESET,\n    UPDATE_BRAND_FAIL,\n\n    GET_BRAND_BY_ID_REQUEST,\n    GET_BRAND_BY_ID_SUCCESS,\n    GET_BRAND_BY_ID_FAIL,\n\n    CLEAR_ERRORS\n} from '../constants/brandConstants'\n\nimport axios from 'axios'\n\nexport const getBrands = () => async (dispatch) => {\n    try {\n        dispatch({ type: ALL_BRANDS_REQUEST })\n\n        const { data } = await axios.get(`/api/brands`)\n        dispatch({\n            type: ALL_BRANDS_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({\n            type: ALL_BRANDS_FAIL,\n            payload: error.response.data.message,\n        })\n    }\n}\n\nexport const getBrandDetailsById = (id) => async (dispatch) => {\n    try {\n\n        dispatch({ type: BRAND_DETAILS_REQUEST })\n        const { data } = await axios.get(`/api/brand/${id}`)\n        dispatch({\n            type: BRAND_DETAILS_SUCCESS,\n            payload: data.brand\n        })\n\n    } catch (error) {\n        dispatch({\n            type: BRAND_DETAILS_FAIL,\n            payload: error.response\n        })\n    }\n}\n\nexport const getBrandDetailsByName = (name) => async (dispatch) => {\n    try {\n\n        dispatch({ type: BRAND_DETAILS_REQUEST })\n        const { data } = await axios.get(`/api/brand/name/${name}`)\n        dispatch({\n            type: BRAND_DETAILS_SUCCESS,\n            payload: data.brand\n        })\n\n    } catch (error) {\n        dispatch({\n            type: BRAND_DETAILS_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// New brand (Admin)\nexport const newBrand = (name, description) => async (dispatch) => {\n    try {\n\n        dispatch({ type: NEW_BRAND_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        const { data } = await axios.post(`/api/admin/brand/new`, { name, description }, config)\n\n        dispatch({\n            type: NEW_BRAND_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: NEW_BRAND_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n\n// Delete brand (Admin)\nexport const deleteBrand = (id) => async (dispatch) => {\n    try {\n\n        dispatch({ type: DELETE_BRAND_REQUEST })\n\n        const { data } = await axios.delete(`/api/admin/brand/${id}`)\n\n        dispatch({\n            type: DELETE_BRAND_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: DELETE_BRAND_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Update brand (ADMIN)\nexport const updateBrand = (id, name, description) => async (dispatch) => {\n    try {\n\n        dispatch({ type: UPDATE_BRAND_REQUEST })\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.put(`/api/admin/brand/${id}`, { name, description }, config)\n\n        dispatch({\n            type: UPDATE_BRAND_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: UPDATE_BRAND_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Clear Errors\nexport const clearErrors = () => async (dispatch) => {\n    dispatch({\n        type: CLEAR_ERRORS\n    })\n}"]},"metadata":{},"sourceType":"module"}