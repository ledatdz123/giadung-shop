{"ast":null,"code":"import axios from 'axios';\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAIL, REGISTER_USER_REQUEST, REGISTER_USER_SUCCESS, REGISTER_USER_FAIL, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAIL, UPDATE_PASSWORD_REQUEST, UPDATE_PASSWORD_SUCCESS, UPDATE_PASSWORD_FAIL, UPDATE_PROFILE_REQUEST, UPDATE_PROFILE_SUCCESS, UPDATE_PROFILE_FAIL, FORGOT_PASSWORD_REQUEST, FORGOT_PASSWORD_SUCCESS, FORGOT_PASSWORD_FAIL, NEW_PASSWORD_REQUEST, NEW_PASSWORD_SUCCESS, NEW_PASSWORD_FAIL, ALL_USERS_REQUEST, ALL_USERS_SUCCESS, ALL_USERS_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAIL, UPDATE_USER_REQUEST, UPDATE_USER_SUCCESS, UPDATE_USER_FAIL, DELETE_USER_REQUEST, DELETE_USER_SUCCESS, DELETE_USER_FAIL, LOGOUT_SUCCESS, LOGOUT_FAIL, CLEAR_ERRORS } from '../constants/userConstants';\nimport { CART_IMPORT } from '../constants/cartConstants'; // Login\n\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: data.user\n    });\n    dispatch({\n      type: CART_IMPORT,\n      payload: JSON.parse(localStorage.getItem(data.user._id))\n    });\n    localStorage.setItem('userLogin', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // Register user\n\nexport const register = (name, email, password, avatar) => async dispatch => {\n  try {\n    dispatch({\n      type: REGISTER_USER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/register', {\n      name,\n      email,\n      password,\n      avatar\n    }, config);\n    dispatch({\n      type: REGISTER_USER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: REGISTER_USER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // Load user\n\nexport const loadUser = () => async dispatch => {\n  try {\n    dispatch({\n      type: LOAD_USER_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/me');\n    dispatch({\n      type: LOAD_USER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: LOAD_USER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // Update profile\n\nexport const updateProfile = (name, email, avatar) => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_PROFILE_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put('/api/me/update', {\n      name,\n      email,\n      avatar\n    }, config);\n    dispatch({\n      type: UPDATE_PROFILE_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PROFILE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // Update password\n\nexport const updatePassword = (oldPassword, password) => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put('/api/password/update', {\n      oldPassword,\n      password\n    }, config);\n    dispatch({\n      type: UPDATE_PASSWORD_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PASSWORD_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // Forgot password\n// export const forgotPassword = (email) => async (dispatch) => {\n//     try {\n//       dispatch({ type: FORGOT_PASSWORD_REQUEST });\n//       const config = { headers: { \"Content-Type\": \"application/json\" } };\n//       const { data } = await axios.post(`/api/v2/password/forgot`, email, config);\n//       dispatch({ type: FORGOT_PASSWORD_SUCCESS, payload: data.message });\n//     } catch (error) {\n//       dispatch({\n//         type: FORGOT_PASSWORD_FAIL,\n//         payload: error.response.data.message,\n//       });\n//     }\n//   };\n// Reset password\n// export const resetPassword = (token, passwords) => async (dispatch) => {\n//     try {\n//         dispatch({ type: NEW_PASSWORD_REQUEST })\n//         const config = {\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             }\n//         }\n//         const { data } = await axios.put(`/api/password/reset/${token}`, passwords, config)\n//         dispatch({\n//             type: NEW_PASSWORD_SUCCESS,\n//             payload: data.success\n//         })\n//     } catch (error) {\n//         dispatch({\n//             type: NEW_PASSWORD_FAIL,\n//             payload: error.response && error.response.data.message ? error.response.data.message : error.message,\n//         })\n//     }\n// }\n\nexport const forgotPassword = email => async dispatch => {\n  try {\n    dispatch({\n      type: FORGOT_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/v2/password/forgot`, email, config);\n    dispatch({\n      type: FORGOT_PASSWORD_SUCCESS,\n      payload: data.message\n    });\n  } catch (error) {\n    dispatch({\n      type: FORGOT_PASSWORD_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Reset Password\n\nexport const resetPassword = (token, passwords) => async dispatch => {\n  try {\n    dispatch({\n      type: RESET_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/v2/password/reset/${token}`, passwords, config);\n    dispatch({\n      type: RESET_PASSWORD_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: RESET_PASSWORD_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Logout user\n\nexport const logout = () => async dispatch => {\n  try {\n    await axios.get('/api/logout');\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n    localStorage.removeItem('userLogin');\n  } catch (error) {\n    dispatch({\n      type: LOGOUT_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // Get all users\n\nexport const allUsers = () => async dispatch => {\n  try {\n    dispatch({\n      type: ALL_USERS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/admin/users');\n    dispatch({\n      type: ALL_USERS_SUCCESS,\n      payload: data.users\n    });\n  } catch (error) {\n    dispatch({\n      type: ALL_USERS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // Update user - ADMIN\n\nexport const updateUser = (id, userData) => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_USER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/admin/user/${id}`, userData, config);\n    dispatch({\n      type: UPDATE_USER_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_USER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // Get user details - ADMIN\n\nexport const getUserDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/admin/user/${id}`);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // Delete user - ADMIN\n\nexport const deleteUser = id => async dispatch => {\n  try {\n    dispatch({\n      type: DELETE_USER_REQUEST\n    });\n    const {\n      data\n    } = await axios.delete(`/api/admin/user/${id}`);\n    dispatch({\n      type: DELETE_USER_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: DELETE_USER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // Clear Errors\n\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["C:/Users/Admin/Documents/CHUNGKHOANNN/giadungshop/frontend/src/actions/userActions.js"],"names":["axios","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAIL","REGISTER_USER_REQUEST","REGISTER_USER_SUCCESS","REGISTER_USER_FAIL","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAIL","UPDATE_PASSWORD_REQUEST","UPDATE_PASSWORD_SUCCESS","UPDATE_PASSWORD_FAIL","UPDATE_PROFILE_REQUEST","UPDATE_PROFILE_SUCCESS","UPDATE_PROFILE_FAIL","FORGOT_PASSWORD_REQUEST","FORGOT_PASSWORD_SUCCESS","FORGOT_PASSWORD_FAIL","NEW_PASSWORD_REQUEST","NEW_PASSWORD_SUCCESS","NEW_PASSWORD_FAIL","ALL_USERS_REQUEST","ALL_USERS_SUCCESS","ALL_USERS_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","UPDATE_USER_FAIL","DELETE_USER_REQUEST","DELETE_USER_SUCCESS","DELETE_USER_FAIL","LOGOUT_SUCCESS","LOGOUT_FAIL","CLEAR_ERRORS","CART_IMPORT","login","email","password","dispatch","type","config","headers","data","post","payload","user","JSON","parse","localStorage","getItem","_id","setItem","stringify","error","response","message","register","name","avatar","loadUser","get","updateProfile","put","success","updatePassword","oldPassword","forgotPassword","resetPassword","token","passwords","RESET_PASSWORD_REQUEST","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_FAIL","logout","removeItem","allUsers","users","updateUser","id","userData","getUserDetails","deleteUser","delete","clearErrors"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport {\n    LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAIL,\n    REGISTER_USER_REQUEST, REGISTER_USER_SUCCESS, REGISTER_USER_FAIL,\n    LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAIL,\n    UPDATE_PASSWORD_REQUEST, UPDATE_PASSWORD_SUCCESS, UPDATE_PASSWORD_FAIL,\n    UPDATE_PROFILE_REQUEST, UPDATE_PROFILE_SUCCESS, UPDATE_PROFILE_FAIL,\n    FORGOT_PASSWORD_REQUEST, FORGOT_PASSWORD_SUCCESS, FORGOT_PASSWORD_FAIL,\n    NEW_PASSWORD_REQUEST, NEW_PASSWORD_SUCCESS, NEW_PASSWORD_FAIL,\n    ALL_USERS_REQUEST, ALL_USERS_SUCCESS, ALL_USERS_FAIL,\n    USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAIL,\n    UPDATE_USER_REQUEST, UPDATE_USER_SUCCESS, UPDATE_USER_FAIL,\n    DELETE_USER_REQUEST, DELETE_USER_SUCCESS, DELETE_USER_FAIL,\n    LOGOUT_SUCCESS, LOGOUT_FAIL,\n    CLEAR_ERRORS\n} from '../constants/userConstants'\nimport { CART_IMPORT } from '../constants/cartConstants'\n\n// Login\nexport const login = (email, password) => async (dispatch) => {\n    try {\n\n        dispatch({ type: LOGIN_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.post('/api/login', { email, password }, config)\n\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: data.user\n        })\n\n        dispatch({\n            type: CART_IMPORT,\n            payload: JSON.parse(localStorage.getItem(data.user._id))\n        })\n        localStorage.setItem('userLogin', JSON.stringify(data))\n\n    } catch (error) {\n        dispatch({\n            type: LOGIN_FAIL,\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message,\n        })\n    }\n}\n\n// Register user\nexport const register = (name, email, password, avatar) => async (dispatch) => {\n    try {\n\n        dispatch({ type: REGISTER_USER_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.post('/api/register', { name, email, password, avatar }, config)\n\n        dispatch({\n            type: REGISTER_USER_SUCCESS,\n            payload: data.user\n        })\n\n    } catch (error) {\n        dispatch({\n            type: REGISTER_USER_FAIL,\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message,\n        })\n    }\n}\n\n// Load user\nexport const loadUser = () => async (dispatch) => {\n    try {\n\n        dispatch({ type: LOAD_USER_REQUEST })\n\n        const { data } = await axios.get('/api/me')\n\n        dispatch({\n            type: LOAD_USER_SUCCESS,\n            payload: data.user\n        })\n\n    } catch (error) {\n        dispatch({\n            type: LOAD_USER_FAIL,\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message,\n        })\n    }\n}\n\n// Update profile\nexport const updateProfile = (name, email, avatar) => async (dispatch) => {\n    try {\n\n        dispatch({ type: UPDATE_PROFILE_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.put('/api/me/update', { name, email, avatar }, config)\n\n        dispatch({\n            type: UPDATE_PROFILE_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: UPDATE_PROFILE_FAIL,\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message,\n        })\n    }\n}\n\n// Update password\nexport const updatePassword = (oldPassword, password) => async (dispatch) => {\n    try {\n\n        dispatch({ type: UPDATE_PASSWORD_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.put('/api/password/update', { oldPassword, password }, config)\n\n        dispatch({\n            type: UPDATE_PASSWORD_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: UPDATE_PASSWORD_FAIL,\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message,\n        })\n    }\n}\n\n// Forgot password\n// export const forgotPassword = (email) => async (dispatch) => {\n//     try {\n//       dispatch({ type: FORGOT_PASSWORD_REQUEST });\n  \n//       const config = { headers: { \"Content-Type\": \"application/json\" } };\n  \n//       const { data } = await axios.post(`/api/v2/password/forgot`, email, config);\n  \n//       dispatch({ type: FORGOT_PASSWORD_SUCCESS, payload: data.message });\n//     } catch (error) {\n//       dispatch({\n//         type: FORGOT_PASSWORD_FAIL,\n//         payload: error.response.data.message,\n//       });\n//     }\n//   };\n  \n\n// Reset password\n// export const resetPassword = (token, passwords) => async (dispatch) => {\n//     try {\n\n//         dispatch({ type: NEW_PASSWORD_REQUEST })\n\n//         const config = {\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             }\n//         }\n\n//         const { data } = await axios.put(`/api/password/reset/${token}`, passwords, config)\n\n//         dispatch({\n//             type: NEW_PASSWORD_SUCCESS,\n//             payload: data.success\n//         })\n\n//     } catch (error) {\n//         dispatch({\n//             type: NEW_PASSWORD_FAIL,\n//             payload: error.response && error.response.data.message ? error.response.data.message : error.message,\n//         })\n//     }\n// }\nexport const forgotPassword = (email) => async (dispatch) => {\n    try {\n      dispatch({ type: FORGOT_PASSWORD_REQUEST });\n  \n      const config = { headers: { \"Content-Type\": \"application/json\" } };\n  \n      const { data } = await axios.post(`/api/v2/password/forgot`, email, config);\n  \n      dispatch({ type: FORGOT_PASSWORD_SUCCESS, payload: data.message });\n    } catch (error) {\n      dispatch({\n        type: FORGOT_PASSWORD_FAIL,\n        payload: error.response.data.message,\n      });\n    }\n  };\n  \n  \n  // Reset Password\n  export const resetPassword = (token, passwords) => async (dispatch) => {\n    try {\n      dispatch({ type: RESET_PASSWORD_REQUEST });\n  \n      const config = { headers: { \"Content-Type\": \"application/json\" } };\n  \n      const { data } = await axios.put(\n        `/api/v2/password/reset/${token}`,\n        passwords,\n        config\n      );\n  \n      dispatch({ type: RESET_PASSWORD_SUCCESS, payload: data.success });\n    } catch (error) {\n      dispatch({\n        type: RESET_PASSWORD_FAIL,\n        payload: error.response.data.message,\n      });\n    }\n  };\n// Logout user\nexport const logout = () => async (dispatch) => {\n    try {\n\n        await axios.get('/api/logout')\n\n        dispatch({\n            type: LOGOUT_SUCCESS,\n        })\n        localStorage.removeItem('userLogin')\n    } catch (error) {\n        dispatch({\n            type: LOGOUT_FAIL,\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message,\n        })\n    }\n}\n\n// Get all users\nexport const allUsers = () => async (dispatch) => {\n    try {\n\n        dispatch({ type: ALL_USERS_REQUEST })\n\n        const { data } = await axios.get('/api/admin/users')\n\n        dispatch({\n            type: ALL_USERS_SUCCESS,\n            payload: data.users\n        })\n\n    } catch (error) {\n        dispatch({\n            type: ALL_USERS_FAIL,\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message,\n        })\n    }\n}\n\n// Update user - ADMIN\nexport const updateUser = (id, userData) => async (dispatch) => {\n    try {\n\n        dispatch({ type: UPDATE_USER_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.put(`/api/admin/user/${id}`, userData, config)\n\n        dispatch({\n            type: UPDATE_USER_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: UPDATE_USER_FAIL,\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message,\n        })\n    }\n}\n\n// Get user details - ADMIN\nexport const getUserDetails = (id) => async (dispatch) => {\n    try {\n\n        dispatch({ type: USER_DETAILS_REQUEST })\n\n\n        const { data } = await axios.get(`/api/admin/user/${id}`)\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data.user\n        })\n\n    } catch (error) {\n        dispatch({\n            type: USER_DETAILS_FAIL,\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message,\n        })\n    }\n}\n\n// Delete user - ADMIN\nexport const deleteUser = (id) => async (dispatch) => {\n    try {\n\n        dispatch({ type: DELETE_USER_REQUEST })\n\n        const { data } = await axios.delete(`/api/admin/user/${id}`)\n\n        dispatch({\n            type: DELETE_USER_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: DELETE_USER_FAIL,\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message,\n        })\n    }\n}\n\n\n// Clear Errors\nexport const clearErrors = () => async (dispatch) => {\n    dispatch({\n        type: CLEAR_ERRORS\n    })\n}"]},"metadata":{},"sourceType":"module"}