{"ast":null,"code":"import { ALL_CATEGORIES_REQUEST, ALL_CATEGORIES_SUCCESS, ALL_CATEGORIES_FAIL, CATEGORY_DETAILS_REQUEST, CATEGORY_DETAILS_SUCCESS, CATEGORY_DETAILS_FAIL, NEW_CATEGORY_REQUEST, NEW_CATEGORY_SUCCESS, NEW_CATEGORY_RESET, NEW_CATEGORY_FAIL, DELETE_CATEGORY_REQUEST, DELETE_CATEGORY_SUCCESS, DELETE_CATEGORY_RESET, DELETE_CATEGORY_FAIL, UPDATE_CATEGORY_REQUEST, UPDATE_CATEGORY_SUCCESS, UPDATE_CATEGORY_RESET, UPDATE_CATEGORY_FAIL, GET_CATEGORY_BY_ID_REQUEST, GET_CATEGORY_BY_ID_SUCCESS, GET_CATEGORY_BY_ID_FAIL, CLEAR_ERRORS } from '../constants/categoryConstants';\nimport axios from 'axios';\nexport const getCategories = () => async dispatch => {\n  try {\n    dispatch({\n      type: ALL_CATEGORIES_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/categories`);\n    dispatch({\n      type: ALL_CATEGORIES_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ALL_CATEGORIES_FAIL,\n      payload: error.response\n    });\n  }\n};\nexport const getCategoryDetailsById = id => async dispatch => {\n  try {\n    dispatch({\n      type: CATEGORY_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/category/${id}`);\n    dispatch({\n      type: CATEGORY_DETAILS_SUCCESS,\n      payload: data.category\n    });\n  } catch (error) {\n    dispatch({\n      type: CATEGORY_DETAILS_FAIL,\n      payload: error.response\n    });\n  }\n};\nexport const getCategoryDetailsByName = name => async dispatch => {\n  try {\n    dispatch({\n      type: CATEGORY_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/category/name/${name}`);\n    dispatch({\n      type: CATEGORY_DETAILS_SUCCESS,\n      payload: data.category\n    });\n  } catch (error) {\n    dispatch({\n      type: CATEGORY_DETAILS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // New category (Admin)\n\nexport const newCategory = (name, description) => async dispatch => {\n  try {\n    dispatch({\n      type: NEW_CATEGORY_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/admin/category/new`, {\n      name,\n      description\n    }, config);\n    dispatch({\n      type: NEW_CATEGORY_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: NEW_CATEGORY_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Delete category (Admin)\n\nexport const deleteCategory = id => async dispatch => {\n  try {\n    dispatch({\n      type: DELETE_CATEGORY_REQUEST\n    });\n    const {\n      data\n    } = await axios.delete(`/api/admin/category/${id}`);\n    dispatch({\n      type: DELETE_CATEGORY_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: DELETE_CATEGORY_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Update category (ADMIN)\n\nexport const updateCategory = (id, name, description) => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_CATEGORY_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/admin/category/${id}`, {\n      name,\n      description\n    }, config);\n    dispatch({\n      type: UPDATE_CATEGORY_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_CATEGORY_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Clear Errors\n\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["C:/Users/Admin/Documents/CHUNGKHOANNN/new/giadungshop/frontend/src/actions/categoryActions.js"],"names":["ALL_CATEGORIES_REQUEST","ALL_CATEGORIES_SUCCESS","ALL_CATEGORIES_FAIL","CATEGORY_DETAILS_REQUEST","CATEGORY_DETAILS_SUCCESS","CATEGORY_DETAILS_FAIL","NEW_CATEGORY_REQUEST","NEW_CATEGORY_SUCCESS","NEW_CATEGORY_RESET","NEW_CATEGORY_FAIL","DELETE_CATEGORY_REQUEST","DELETE_CATEGORY_SUCCESS","DELETE_CATEGORY_RESET","DELETE_CATEGORY_FAIL","UPDATE_CATEGORY_REQUEST","UPDATE_CATEGORY_SUCCESS","UPDATE_CATEGORY_RESET","UPDATE_CATEGORY_FAIL","GET_CATEGORY_BY_ID_REQUEST","GET_CATEGORY_BY_ID_SUCCESS","GET_CATEGORY_BY_ID_FAIL","CLEAR_ERRORS","axios","getCategories","dispatch","type","data","get","payload","error","response","getCategoryDetailsById","id","category","getCategoryDetailsByName","name","message","newCategory","description","config","headers","post","deleteCategory","delete","success","updateCategory","put","clearErrors"],"mappings":"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","sourcesContent":["import {\n    ALL_CATEGORIES_REQUEST,\n    ALL_CATEGORIES_SUCCESS,\n    ALL_CATEGORIES_FAIL,\n\n    CATEGORY_DETAILS_REQUEST,\n    CATEGORY_DETAILS_SUCCESS,\n    CATEGORY_DETAILS_FAIL,\n\n    NEW_CATEGORY_REQUEST,\n    NEW_CATEGORY_SUCCESS,\n    NEW_CATEGORY_RESET,\n    NEW_CATEGORY_FAIL,\n\n    DELETE_CATEGORY_REQUEST,\n    DELETE_CATEGORY_SUCCESS,\n    DELETE_CATEGORY_RESET,\n    DELETE_CATEGORY_FAIL,\n\n    UPDATE_CATEGORY_REQUEST,\n    UPDATE_CATEGORY_SUCCESS,\n    UPDATE_CATEGORY_RESET,\n    UPDATE_CATEGORY_FAIL,\n\n    GET_CATEGORY_BY_ID_REQUEST,\n    GET_CATEGORY_BY_ID_SUCCESS,\n    GET_CATEGORY_BY_ID_FAIL,\n\n    CLEAR_ERRORS\n} from '../constants/categoryConstants'\n\nimport axios from 'axios'\n\nexport const getCategories = () => async (dispatch) => {\n    try {\n        dispatch({ type: ALL_CATEGORIES_REQUEST })\n\n        const { data } = await axios.get(`/api/categories`)\n        dispatch({\n            type: ALL_CATEGORIES_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({\n            type: ALL_CATEGORIES_FAIL,\n            payload: error.response,\n        })\n    }\n}\n\nexport const getCategoryDetailsById = (id) => async (dispatch) => {\n    try {\n\n        dispatch({ type: CATEGORY_DETAILS_REQUEST })\n        const { data } = await axios.get(`/api/category/${id}`)\n        dispatch({\n            type: CATEGORY_DETAILS_SUCCESS,\n            payload: data.category\n        })\n\n    } catch (error) {\n        dispatch({\n            type: CATEGORY_DETAILS_FAIL,\n            payload: error.response\n        })\n    }\n}\n\nexport const getCategoryDetailsByName = (name) => async (dispatch) => {\n    try {\n\n        dispatch({ type: CATEGORY_DETAILS_REQUEST })\n        const { data } = await axios.get(`/api/category/name/${name}`)\n        dispatch({\n            type: CATEGORY_DETAILS_SUCCESS,\n            payload: data.category\n        })\n\n    } catch (error) {\n        dispatch({\n            type: CATEGORY_DETAILS_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// New category (Admin)\nexport const newCategory = (name, description) => async (dispatch) => {\n    try {\n\n        dispatch({ type: NEW_CATEGORY_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        const { data } = await axios.post(`/api/admin/category/new`, { name, description }, config)\n\n        dispatch({\n            type: NEW_CATEGORY_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: NEW_CATEGORY_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n\n// Delete category (Admin)\nexport const deleteCategory = (id) => async (dispatch) => {\n    try {\n\n        dispatch({ type: DELETE_CATEGORY_REQUEST })\n\n        const { data } = await axios.delete(`/api/admin/category/${id}`)\n\n        dispatch({\n            type: DELETE_CATEGORY_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: DELETE_CATEGORY_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Update category (ADMIN)\nexport const updateCategory = (id, name, description) => async (dispatch) => {\n    try {\n\n        dispatch({ type: UPDATE_CATEGORY_REQUEST })\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.put(`/api/admin/category/${id}`, { name, description }, config)\n\n        dispatch({\n            type: UPDATE_CATEGORY_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: UPDATE_CATEGORY_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Clear Errors\nexport const clearErrors = () => async (dispatch) => {\n    dispatch({\n        type: CLEAR_ERRORS\n    })\n}"]},"metadata":{},"sourceType":"module"}