{"ast":null,"code":"import axios from 'axios';\nimport { CREATE_ORDER_REQUEST, CREATE_ORDER_SUCCESS, CREATE_ORDER_FAIL, MY_ORDERS_REQUEST, MY_ORDERS_SUCCESS, MY_ORDERS_FAIL, ALL_ORDERS_REQUEST, ALL_ORDERS_SUCCESS, ALL_ORDERS_FAIL, UPDATE_ORDER_SUCCESS, UPDATE_ORDER_REQUEST, UPDATE_ORDER_FAIL, DELETE_ORDER_REQUEST, DELETE_ORDER_SUCCESS, DELETE_ORDER_FAIL, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_DETAILS_FAIL, CLEAR_ERRORS } from '../constants/orderConstants';\nimport { UNDO_STOCK_PRODUCT_REQUEST, UNDO_STOCK_PRODUCT_SUCCESS, UNDO_STOCK_PRODUCT_FAIL } from '../constants/productConstants';\nexport const createOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CREATE_ORDER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/order/new', order, config);\n    dispatch({\n      type: CREATE_ORDER_SUCCESS,\n      payload: data\n    });\n    localStorage.removeItem(data.order.user);\n  } catch (error) {\n    dispatch({\n      type: CREATE_ORDER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Get curretly logged in user orders\n\nexport const myOrders = () => async dispatch => {\n  try {\n    dispatch({\n      type: MY_ORDERS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/orders/me');\n    dispatch({\n      type: MY_ORDERS_SUCCESS,\n      payload: data.orders\n    });\n  } catch (error) {\n    dispatch({\n      type: MY_ORDERS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Get order details\n\nexport const getOrderDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: ORDER_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/order/${id}`);\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data.order\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_DETAILS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Get all orders - ADMIN\n\nexport const allOrders = () => async dispatch => {\n  try {\n    dispatch({\n      type: ALL_ORDERS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/admin/orders`);\n    dispatch({\n      type: ALL_ORDERS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ALL_ORDERS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // update order by admin\n\nexport const updateOrderByAdmin = (id, status) => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_ORDER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/admin/order/${id}`, status, config);\n    dispatch({\n      type: UPDATE_ORDER_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_ORDER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // update order by user\n\nexport const updateStatusOrder = (id, status) => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_ORDER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/order/${id}`, status, config);\n    dispatch({\n      type: UPDATE_ORDER_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_ORDER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // update order by user\n\nexport const undoStockProduct = (productId, stock) => async dispatch => {\n  try {\n    dispatch({\n      type: UNDO_STOCK_PRODUCT_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/product/${productId}`);\n    const sold = data.product.sold - stock;\n    stock = data.product.stock + stock;\n    await axios.put(`/api/product/stock/${productId}`, {\n      stock,\n      sold\n    }, config);\n    dispatch({\n      type: UNDO_STOCK_PRODUCT_SUCCESS,\n      payload: 'success'\n    });\n  } catch (error) {\n    dispatch({\n      type: UNDO_STOCK_PRODUCT_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Delete order\n\nexport const deleteOrder = id => async dispatch => {\n  try {\n    dispatch({\n      type: DELETE_ORDER_REQUEST\n    });\n    const {\n      data\n    } = await axios.delete(`/api/admin/order/${id}`);\n    dispatch({\n      type: DELETE_ORDER_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: DELETE_ORDER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Clear Errors\n\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["C:/Users/Admin/Documents/CHUNGKHOANNN/new/giadungshop/frontend/src/actions/orderActions.js"],"names":["axios","CREATE_ORDER_REQUEST","CREATE_ORDER_SUCCESS","CREATE_ORDER_FAIL","MY_ORDERS_REQUEST","MY_ORDERS_SUCCESS","MY_ORDERS_FAIL","ALL_ORDERS_REQUEST","ALL_ORDERS_SUCCESS","ALL_ORDERS_FAIL","UPDATE_ORDER_SUCCESS","UPDATE_ORDER_REQUEST","UPDATE_ORDER_FAIL","DELETE_ORDER_REQUEST","DELETE_ORDER_SUCCESS","DELETE_ORDER_FAIL","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","ORDER_DETAILS_FAIL","CLEAR_ERRORS","UNDO_STOCK_PRODUCT_REQUEST","UNDO_STOCK_PRODUCT_SUCCESS","UNDO_STOCK_PRODUCT_FAIL","createOrder","order","dispatch","getState","type","config","headers","data","post","payload","localStorage","removeItem","user","error","response","message","myOrders","get","orders","getOrderDetails","id","allOrders","updateOrderByAdmin","status","put","success","updateStatusOrder","undoStockProduct","productId","stock","sold","product","deleteOrder","delete","clearErrors"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nimport {\n    CREATE_ORDER_REQUEST,\n    CREATE_ORDER_SUCCESS,\n    CREATE_ORDER_FAIL,\n    MY_ORDERS_REQUEST,\n    MY_ORDERS_SUCCESS,\n    MY_ORDERS_FAIL,\n    ALL_ORDERS_REQUEST,\n    ALL_ORDERS_SUCCESS,\n    ALL_ORDERS_FAIL,\n    UPDATE_ORDER_SUCCESS,\n    UPDATE_ORDER_REQUEST,\n    UPDATE_ORDER_FAIL,\n    DELETE_ORDER_REQUEST,\n    DELETE_ORDER_SUCCESS,\n    DELETE_ORDER_FAIL,\n    ORDER_DETAILS_REQUEST,\n    ORDER_DETAILS_SUCCESS,\n    ORDER_DETAILS_FAIL,\n    CLEAR_ERRORS\n} from '../constants/orderConstants'\nimport {\n    UNDO_STOCK_PRODUCT_REQUEST,\n    UNDO_STOCK_PRODUCT_SUCCESS,\n    UNDO_STOCK_PRODUCT_FAIL,\n\n} from '../constants/productConstants'\n\nexport const createOrder = (order) => async (dispatch, getState) => {\n    try {\n\n        dispatch({ type: CREATE_ORDER_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        const { data } = await axios.post('/api/order/new', order, config)\n\n        dispatch({\n            type: CREATE_ORDER_SUCCESS,\n            payload: data\n        })\n        localStorage.removeItem(data.order.user)\n\n    } catch (error) {\n        dispatch({\n            type: CREATE_ORDER_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Get curretly logged in user orders\nexport const myOrders = () => async (dispatch) => {\n    try {\n\n        dispatch({ type: MY_ORDERS_REQUEST });\n\n        const { data } = await axios.get('/api/orders/me')\n\n        dispatch({\n            type: MY_ORDERS_SUCCESS,\n            payload: data.orders\n        })\n\n    } catch (error) {\n        dispatch({\n            type: MY_ORDERS_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Get order details\nexport const getOrderDetails = (id) => async (dispatch) => {\n    try {\n\n        dispatch({ type: ORDER_DETAILS_REQUEST })\n\n        const { data } = await axios.get(`/api/order/${id}`)\n\n        dispatch({\n            type: ORDER_DETAILS_SUCCESS,\n            payload: data.order\n        })\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_DETAILS_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Get all orders - ADMIN\nexport const allOrders = () => async (dispatch) => {\n    try {\n\n        dispatch({ type: ALL_ORDERS_REQUEST });\n\n        const { data } = await axios.get(`/api/admin/orders`)\n\n        dispatch({\n            type: ALL_ORDERS_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: ALL_ORDERS_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// update order by admin\nexport const updateOrderByAdmin = (id, status) => async (dispatch) => {\n    try {\n\n        dispatch({ type: UPDATE_ORDER_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.put(`/api/admin/order/${id}`, status, config)\n\n        dispatch({\n            type: UPDATE_ORDER_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: UPDATE_ORDER_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// update order by user\nexport const updateStatusOrder = (id, status) => async (dispatch) => {\n    try {\n\n        dispatch({ type: UPDATE_ORDER_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.put(`/api/order/${id}`, status, config)\n\n        dispatch({\n            type: UPDATE_ORDER_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: UPDATE_ORDER_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// update order by user\nexport const undoStockProduct = (productId, stock) => async (dispatch) => {\n    try {\n\n        dispatch({ type: UNDO_STOCK_PRODUCT_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        const { data } = await axios.get(`/api/product/${productId}`)\n        const sold = data.product.sold - stock\n        stock = data.product.stock + stock\n        await axios.put(`/api/product/stock/${productId}`, { stock, sold }, config)\n\n        dispatch({\n            type: UNDO_STOCK_PRODUCT_SUCCESS,\n            payload: 'success'\n        })\n\n    } catch (error) {\n        dispatch({\n            type: UNDO_STOCK_PRODUCT_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n// Delete order\nexport const deleteOrder = (id) => async (dispatch) => {\n    try {\n\n        dispatch({ type: DELETE_ORDER_REQUEST })\n\n        const { data } = await axios.delete(`/api/admin/order/${id}`)\n\n        dispatch({\n            type: DELETE_ORDER_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: DELETE_ORDER_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n\n// Clear Errors\nexport const clearErrors = () => async (dispatch) => {\n    dispatch({\n        type: CLEAR_ERRORS\n    })\n}"]},"metadata":{},"sourceType":"module"}